using FluiTec.DatevSharp.Helpers;
using FluiTec.DatevSharp.Rows.Maps.Base;

namespace FluiTec.DatevSharp.Rows.Maps
{
    /// <summary>
    ///     Map of address.
    /// </summary>
    public class AddressMap : ClassMap<AddressRow.AddressRow>
    {
        /// <summary>
        ///     Default constructor.
        /// </summary>
        public AddressMap()
        {
            // base
            Map(row => row.AccountNumber, row => row.AccountNumber.ToDatev());
            Map(row => row.Name_Enterprise, row => row.Name_Enterprise.ToDatev());
            Map(row => row.Name_Enterprise_Extension, row => row.Name_Enterprise_Extension.ToDatev());
            Map(row => row.Name_Person, row => row.Name_Person.ToDatev());
            Map(row => row.FirstName_Person, row => row.FirstName_Person.ToDatev());
            Map(row => row.Name, row => row.Name.ToDatev());
            Map(row => row.AddressType, row => row.AddressType.ToDatev());
            Map(row => row.ShortName, row => row.ShortName.ToDatev());
            Map(row => row.EuCountry, row => row.EuCountry.ToDatev());
            Map(row => row.Country, row => row.Country.ToDatev());
            Map(row => row.TaxIdNumber, row => row.TaxIdNumber.ToDatev());
            Map(row => row.Salutation, row => row.Salutation.ToDatev());
            Map(row => row.DivergentSalutation, row => row.DivergentSalutation.ToDatev());
            Map(row => row.Title, row => row.Title.ToDatev());
            Map(row => row.NobilityTitle, row => row.NobilityTitle.ToDatev());
            Map(row => row.NamePrefix, row => row.NamePrefix.ToDatev());
            Map(row => row.PostalAddressType, row => row.PostalAddressType.ToDatev());
            Map(row => row.Street, row => row.Street.ToDatev());
            Map(row => row.PostBox, row => row.PostBox.ToDatev());
            Map(row => row.ZipCode, row => row.ZipCode.ToDatev());
            Map(row => row.City, row => row.City.ToDatev());
            Map(row => row.TransportAddition, row => row.TransportAddition.ToDatev());
            Map(row => row.AddressAddition, row => row.AddressAddition.ToDatev());
            Map(row => row.DeliveryDirective1, row => row.DeliveryDirective1.ToDatev());
            Map(row => row.DeliveryDirective2, row => row.DeliveryDirective2.ToDatev());
            Map(row => row.MarkerCorrespondenceAddress, row => row.MarkerCorrespondenceAddress.ToDatev());
            Map(row => row.ValidFrom, row => row.ValidFrom.ToDatevDateReverse());
            Map(row => row.ValidTill, row => row.ValidTill.ToDatevDateReverse());
            Map(row => row.Phone, row => row.Phone.ToDatev());
            Map(row => row.PhoneNote, row => row.PhoneNote.ToDatev());
            Map(row => row.ManagementPhone, row => row.ManagementPhone.ToDatev());
            Map(row => row.ManagementPhoneNote, row => row.ManagementPhoneNote.ToDatev());
            Map(row => row.Mail, row => row.Mail.ToDatev());
            Map(row => row.MailNote, row => row.MailNote.ToDatev());
            Map(row => row.Website, row => row.Website.ToDatev());
            Map(row => row.WebsiteNote, row => row.WebsiteNote.ToDatev());
            Map(row => row.Fax, row => row.Fax.ToDatev());
            Map(row => row.FaxNote, row => row.FaxNote.ToDatev());
            Map(row => row.Other, row => row.Other.ToDatev());
            Map(row => row.OtherNote, row => row.OtherNote.ToDatev());
            Map(row => row.LetterSalutation, row => row.LetterSalutation.ToDatev());
            Map(row => row.ComplimentaryClose, row => row.ComplimentaryClose.ToDatev());
            Map(row => row.CustomerNumber, row => row.CustomerNumber.ToDatev());
            Map(row => row.TaxNumber, row => row.TaxNumber.ToDatev());
            Map(row => row.Language, row => row.Language?.ToDatev());
            Map(row => row.ContactPerson, row => row.ContactPerson.ToDatev());
            Map(row => row.Representative, row => row.Representative.ToDatev());
            Map(row => row.Referee, row => row.Referee.ToDatev());
            Map(row => row.IsDiverse, row => row.IsDiverse.ToDatev());
            Map(row => row.OutputTarget, row => row.OutputTarget?.ToDatev());
            Map(row => row.CurrencyHandling, row => row.CurrencyHandling?.ToDatev());
            Map(row => row.CreditLimit, row => row.CreditLimit.ToDatev());
            Map(row => row.TermsOfPaymentNumber, row => row.TermsOfPaymentNumber.ToDatev());
            Map(row => row.DebitorDueDays, row => row.DebitorDueDays.ToDatev());
            Map(row => row.DebitorCashDiscount, row => row.DebitorCashDiscount.ToDatev());
            Map(row => row.CreditorDueDays1, row => row.CreditorDueDays1.ToDatev());
            Map(row => row.CreditorCashDiscount1, row => row.CreditorCashDiscount1.ToDatev());
            Map(row => row.CreditorDueDays2, row => row.CreditorDueDays2.ToDatev());
            Map(row => row.CreditorCashDiscount2, row => row.CreditorCashDiscount2.ToDatev());
            Map(row => row.CreditorDueDays3, row => row.CreditorDueDays3.ToDatev());
            Map(row => row.CreditorDueDays4, row => row.CreditorDueDays4.ToDatev());
            Map(row => row.CreditorCashDiscount4, row => row.CreditorCashDiscount4.ToDatev());
            Map(row => row.CreditorDueDays5, row => row.CreditorDueDays5.ToDatev());
            Map(row => row.CreditorCashDiscount5, row => row.CreditorCashDiscount5.ToDatev());
            Map(row => row.Admonition, row => row.Admonition?.ToDatev());
            Map(row => row.AccountStatement, row => row.AccountStatement?.ToDatev());
            Map(row => row.AdmonitionText1, row => row.AdmonitionText1?.ToDatev());
            Map(row => row.AdmonitionText2, row => row.AdmonitionText2?.ToDatev());
            Map(row => row.AdmonitionText3, row => row.AdmonitionText3?.ToDatev());
            Map(row => row.AccountStatementText, row => row.AccountStatementText?.ToDatev());
            Map(row => row.AdmonitionLimit, row => row.AdmonitionLimit?.ToDatev());
            Map(row => row.AdmonitionLimitPercent, row => row.AdmonitionLimitPercent?.ToDatev());
            Map(row => row.InterestCalculation, row => row.InterestCalculation?.ToDatev());
            Map(row => row.AdmonitionInterestRate1, row => row.AdmonitionInterestRate1?.ToDatev());
            Map(row => row.AdmonitionInterestRate2, row => row.AdmonitionInterestRate2?.ToDatev());
            Map(row => row.AdmonitionInterestRate3, row => row.AdmonitionInterestRate3?.ToDatev());
            Map(row => row.DebitAdvice, row => row.DebitAdvice?.ToDatev());
            Map(row => row.Method, row => row.Method?.ToDatev());
            Map(row => row.DebitAdviceBank, row => row.DebitAdviceBank.ToDatev());
            Map(row => row.PaymentTransferMedium, row => row.PaymentTransferMedium?.ToDatev());
            Map(row => row.IndividualField1, row => row.IndividualField1?.ToDatev());
            Map(row => row.IndividualField2, row => row.IndividualField2?.ToDatev());
            Map(row => row.IndividualField3, row => row.IndividualField3?.ToDatev());
            Map(row => row.IndividualField4, row => row.IndividualField4?.ToDatev());
            Map(row => row.IndividualField5, row => row.IndividualField5?.ToDatev());
            Map(row => row.IndividualField6, row => row.IndividualField6?.ToDatev());
            Map(row => row.IndividualField7, row => row.IndividualField7?.ToDatev());
            Map(row => row.IndividualField8, row => row.IndividualField8?.ToDatev());
            Map(row => row.IndividualField9, row => row.IndividualField9?.ToDatev());
            Map(row => row.IndividualField10, row => row.IndividualField10?.ToDatev());
            Map(row => row.IndividualField11, row => row.IndividualField11?.ToDatev());
            Map(row => row.IndividualField12, row => row.IndividualField12?.ToDatev());
            Map(row => row.IndividualField13, row => row.IndividualField13?.ToDatev());
            Map(row => row.IndividualField14, row => row.IndividualField14?.ToDatev());
            Map(row => row.IndividualField15, row => row.IndividualField15?.ToDatev());
            Map(row => row.BillingDivergentSalutation, row => row.BillingDivergentSalutation?.ToDatev());
            Map(row => row.BillingPostalAddressType, row => row.BillingPostalAddressType.ToDatev());
            Map(row => row.BillingStreet, row => row.BillingStreet.ToDatev());
            Map(row => row.BillingPostBox, row => row.BillingPostBox.ToDatev());
            Map(row => row.BillingZipCode, row => row.BillingZipCode.ToDatev());
            Map(row => row.BillingCity, row => row.BillingCity.ToDatev());
            Map(row => row.BillingCountry, row => row.BillingCountry.ToDatev());
            Map(row => row.BillingTransportAddition, row => row.BillingTransportAddition.ToDatev());
            Map(row => row.BillingAddressAddition, row => row.BillingAddressAddition.ToDatev());
            Map(row => row.BillingDeliveryDirective1, row => row.BillingDeliveryDirective1.ToDatev());
            Map(row => row.BillingDeliveryDirective2, row => row.BillingDeliveryDirective2.ToDatev());
            Map(row => row.BillingValidFrom, row => row.BillingValidFrom.ToDatevDateReverse());
            Map(row => row.BillingValidTill, row => row.BillingValidTill.ToDatevDateReverse());
            Map(row => row.ExternalAccountNumber, row => row.ExternalAccountNumber.ToDatev());
            Map(row => row.Insolvent, row => row.Insolvent.ToDatev());
            Map(row => row.SepaMandateReference1, row => row.SepaMandateReference1.ToDatev());
            Map(row => row.SepaMandateReference2, row => row.SepaMandateReference2.ToDatev());
            Map(row => row.SepaMandateReference3, row => row.SepaMandateReference3.ToDatev());
            Map(row => row.SepaMandateReference4, row => row.SepaMandateReference4.ToDatev());
            Map(row => row.SepaMandateReference5, row => row.SepaMandateReference5.ToDatev());
            Map(row => row.SepaMandateReference6, row => row.SepaMandateReference6.ToDatev());
            Map(row => row.SepaMandateReference7, row => row.SepaMandateReference7.ToDatev());
            Map(row => row.SepaMandateReference8, row => row.SepaMandateReference8.ToDatev());
            Map(row => row.SepaMandateReference9, row => row.SepaMandateReference9.ToDatev());
            Map(row => row.SepaMandateReference10, row => row.SepaMandateReference10.ToDatev());
            Map(row => row.LinkedDebitAccountNumber, row => row.LinkedDebitAccountNumber.ToDatev());
            Map(row => row.AdmonitionBlockTill, row => row.AdmonitionBlockTill.ToDatevDateReverse());
            Map(row => row.DebitAdviceBlockTill, row => row.DebitAdviceBlockTill.ToDatevDateReverse());
            Map(row => row.PaymentBlockTill, row => row.PaymentBlockTill.ToDatevDateReverse());
            Map(row => row.DuesCalculation, row => row.DuesCalculation.ToDatev());
            Map(row => row.AdmonitionDues1, row => row.AdmonitionDues1.ToDatev());
            Map(row => row.AdmonitionDues2, row => row.AdmonitionDues2.ToDatev());
            Map(row => row.AdmonitionDues3, row => row.AdmonitionDues3.ToDatev());
            Map(row => row.DelayDuesCalculation, row => row.DelayDuesCalculation.ToDatev());
            Map(row => row.DelayDues1, row => row.DelayDues1.ToDatev());
            Map(row => row.DelayDues2, row => row.DelayDues2.ToDatev());
            Map(row => row.DelayDues3, row => row.DelayDues3.ToDatev());

            // bank
            Map(row => row.BankCode1, row => row.BankCode1.ToDatev());
            Map(row => row.BankName1, row => row.BankName1.ToDatev());
            Map(row => row.BankAccountNumber1, row => row.BankAccountNumber1.ToDatev());
            Map(row => row.BankCountry1, row => row.BankCountry1.ToDatev());
            Map(row => row.Iban1, row => row.Iban1.ToDatev());
            Map(row => row.Iban1Correct, row => row.Iban1Correct.ToDatevWrapped());
            Map(row => row.Swift1, row => row.Swift1.ToDatev());
            Map(row => row.DivergentAccountHolder1, row => row.DivergentAccountHolder1.ToDatev());
            Map(row => row.MarkerMainBankingAccount1, row => row.MarkerMainBankingAccount1.ToDatevWrapped());
            Map(row => row.BankValidFrom1, row => row.BankValidFrom1.ToDatevDateReverse());
            Map(row => row.BankValidTill1, row => row.BankValidTill1.ToDatevDateReverse());
            Map(row => row.BankCode2, row => row.BankCode2.ToDatev());
            Map(row => row.BankName2, row => row.BankName2.ToDatev());
            Map(row => row.BankAccountNumber2, row => row.BankAccountNumber2.ToDatev());
            Map(row => row.BankCountry2, row => row.BankCountry2.ToDatev());
            Map(row => row.Iban2, row => row.Iban2.ToDatev());
            Map(row => row.Iban2Correct, row => row.Iban2Correct.ToDatevWrapped());
            Map(row => row.Swift2, row => row.Swift2.ToDatev());
            Map(row => row.DivergentAccountHolder2, row => row.DivergentAccountHolder2.ToDatev());
            Map(row => row.MarkerMainBankingAccount2, row => row.MarkerMainBankingAccount2.ToDatevWrapped());
            Map(row => row.BankValidFrom2, row => row.BankValidFrom2.ToDatevDateReverse());
            Map(row => row.BankValidTill2, row => row.BankValidTill2.ToDatevDateReverse());
            Map(row => row.BankCode3, row => row.BankCode3.ToDatev());
            Map(row => row.BankName3, row => row.BankName3.ToDatev());
            Map(row => row.BankAccountNumber3, row => row.BankAccountNumber3.ToDatev());
            Map(row => row.BankCountry3, row => row.BankCountry3.ToDatev());
            Map(row => row.Iban3, row => row.Iban3.ToDatev());
            Map(row => row.Iban3Correct, row => row.Iban3Correct.ToDatevWrapped());
            Map(row => row.Swift3, row => row.Swift3.ToDatev());
            Map(row => row.DivergentAccountHolder3, row => row.DivergentAccountHolder3.ToDatev());
            Map(row => row.MarkerMainBankingAccount3, row => row.MarkerMainBankingAccount3.ToDatevWrapped());
            Map(row => row.BankValidFrom3, row => row.BankValidFrom3.ToDatevDateReverse());
            Map(row => row.BankValidTill3, row => row.BankValidTill3.ToDatevDateReverse());
            Map(row => row.BankCode4, row => row.BankCode4.ToDatev());
            Map(row => row.BankName4, row => row.BankName4.ToDatev());
            Map(row => row.BankAccountNumber4, row => row.BankAccountNumber4.ToDatev());
            Map(row => row.BankCountry4, row => row.BankCountry4.ToDatev());
            Map(row => row.Iban4, row => row.Iban4.ToDatev());
            Map(row => row.Iban4Correct, row => row.Iban4Correct.ToDatevWrapped());
            Map(row => row.Swift4, row => row.Swift4.ToDatev());
            Map(row => row.DivergentAccountHolder4, row => row.DivergentAccountHolder4.ToDatev());
            Map(row => row.MarkerMainBankingAccount4, row => row.MarkerMainBankingAccount4.ToDatevWrapped());
            Map(row => row.BankValidFrom4, row => row.BankValidFrom4.ToDatevDateReverse());
            Map(row => row.BankValidTill4, row => row.BankValidTill4.ToDatevDateReverse());
            Map(row => row.BankCode5, row => row.BankCode5.ToDatev());
            Map(row => row.BankName5, row => row.BankName5.ToDatev());
            Map(row => row.BankAccountNumber5, row => row.BankAccountNumber5.ToDatev());
            Map(row => row.BankCountry5, row => row.BankCountry5.ToDatev());
            Map(row => row.Iban5, row => row.Iban5.ToDatev());
            Map(row => row.Iban5Correct, row => row.Iban5Correct.ToDatevWrapped());
            Map(row => row.Swift5, row => row.Swift5.ToDatev());
            Map(row => row.DivergentAccountHolder5, row => row.DivergentAccountHolder5.ToDatev());
            Map(row => row.MarkerMainBankingAccount5, row => row.MarkerMainBankingAccount5.ToDatevWrapped());
            Map(row => row.BankValidFrom5, row => row.BankValidFrom5.ToDatevDateReverse());
            Map(row => row.BankValidTill5, row => row.BankValidTill5.ToDatevDateReverse());
            Map(row => row.BusinessPartnerBank, row => row.BusinessPartnerBank.ToDatev());
            Map(row => row.BankCode6, row => row.BankCode6.ToDatev());
            Map(row => row.BankName6, row => row.BankName6.ToDatev());
            Map(row => row.BankAccountNumber6, row => row.BankAccountNumber6.ToDatev());
            Map(row => row.BankCountry6, row => row.BankCountry6.ToDatev());
            Map(row => row.Iban6, row => row.Iban6.ToDatev());
            Map(row => row.Iban6Correct, row => row.Iban6Correct.ToDatevWrapped());
            Map(row => row.Swift6, row => row.Swift6.ToDatev());
            Map(row => row.DivergentAccountHolder6, row => row.DivergentAccountHolder6.ToDatev());
            Map(row => row.MarkerMainBankingAccount6, row => row.MarkerMainBankingAccount6.ToDatevWrapped());
            Map(row => row.BankValidFrom6, row => row.BankValidFrom6.ToDatevDateReverse());
            Map(row => row.BankValidTill6, row => row.BankValidTill6.ToDatevDateReverse());
            Map(row => row.BankCode7, row => row.BankCode7.ToDatev());
            Map(row => row.BankName7, row => row.BankName7.ToDatev());
            Map(row => row.BankAccountNumber7, row => row.BankAccountNumber7.ToDatev());
            Map(row => row.BankCountry7, row => row.BankCountry7.ToDatev());
            Map(row => row.Iban7, row => row.Iban7.ToDatev());
            Map(row => row.Iban7Correct, row => row.Iban7Correct.ToDatevWrapped());
            Map(row => row.Swift7, row => row.Swift7.ToDatev());
            Map(row => row.DivergentAccountHolder7, row => row.DivergentAccountHolder7.ToDatev());
            Map(row => row.MarkerMainBankingAccount7, row => row.MarkerMainBankingAccount7.ToDatevWrapped());
            Map(row => row.BankValidFrom7, row => row.BankValidFrom7.ToDatevDateReverse());
            Map(row => row.BankValidTill7, row => row.BankValidTill7.ToDatevDateReverse());
            Map(row => row.BankCode8, row => row.BankCode8.ToDatev());
            Map(row => row.BankName8, row => row.BankName8.ToDatev());
            Map(row => row.BankAccountNumber8, row => row.BankAccountNumber8.ToDatev());
            Map(row => row.BankCountry8, row => row.BankCountry8.ToDatev());
            Map(row => row.Iban8, row => row.Iban8.ToDatev());
            Map(row => row.Iban8Correct, row => row.Iban8Correct.ToDatevWrapped());
            Map(row => row.Swift8, row => row.Swift8.ToDatev());
            Map(row => row.DivergentAccountHolder8, row => row.DivergentAccountHolder8.ToDatev());
            Map(row => row.MarkerMainBankingAccount8, row => row.MarkerMainBankingAccount8.ToDatevWrapped());
            Map(row => row.BankValidFrom8, row => row.BankValidFrom8.ToDatevDateReverse());
            Map(row => row.BankValidTill8, row => row.BankValidTill8.ToDatevDateReverse());
            Map(row => row.BankCode9, row => row.BankCode9.ToDatev());
            Map(row => row.BankName9, row => row.BankName9.ToDatev());
            Map(row => row.BankAccountNumber9, row => row.BankAccountNumber9.ToDatev());
            Map(row => row.BankCountry9, row => row.BankCountry9.ToDatev());
            Map(row => row.Iban9, row => row.Iban9.ToDatev());
            Map(row => row.Iban9Correct, row => row.Iban9Correct.ToDatevWrapped());
            Map(row => row.Swift9, row => row.Swift9.ToDatev());
            Map(row => row.DivergentAccountHolder9, row => row.DivergentAccountHolder9.ToDatev());
            Map(row => row.MarkerMainBankingAccount9, row => row.MarkerMainBankingAccount9.ToDatevWrapped());
            Map(row => row.BankValidFrom9, row => row.BankValidFrom9.ToDatevDateReverse());
            Map(row => row.BankValidTill9, row => row.BankValidTill9.ToDatevDateReverse());
            Map(row => row.BankCode10, row => row.BankCode10.ToDatev());
            Map(row => row.BankName10, row => row.BankName10.ToDatev());
            Map(row => row.BankAccountNumber10, row => row.BankAccountNumber10.ToDatev());
            Map(row => row.BankCountry10, row => row.BankCountry10.ToDatev());
            Map(row => row.Iban10, row => row.Iban10.ToDatev());
            Map(row => row.Iban10Correct, row => row.Iban10Correct.ToDatevWrapped());
            Map(row => row.Swift10, row => row.Swift10.ToDatev());
            Map(row => row.DivergentAccountHolder10, row => row.DivergentAccountHolder10.ToDatev());
            Map(row => row.MarkerMainBankingAccount10, row => row.MarkerMainBankingAccount10.ToDatevWrapped());
            Map(row => row.BankValidFrom10, row => row.BankValidFrom10.ToDatevDateReverse());
            Map(row => row.BankValidTill10, row => row.BankValidTill10.ToDatevDateReverse());
        }
    }
}